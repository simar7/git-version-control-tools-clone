#!/bin/sh

die() {
    echo "$1" 1>&2
    exit ${2:-1}
}

usage() {
    echo "USAGE"
    echo " $0 [-r source_repo_root] [-t target_directory] <repository>"
    echo
}

TEMP=`getopt --options hr:t:l: --long help,root:,target:lock-retries: \
    -n 'mirror-pull' -- "$@"`
if [ $? != 0 ]; then
    die "getopt barfed"
fi

eval set -- "$TEMP"

# defaults:
REPO_ROOT=http://hg.mozilla.org
REPO_TARGET=/repo/hg/mozilla
LOCK_RETRIES=15 # every 8 seconds for 2 minutes

while true; do
    case "$1" in 
        -r|--root)
            REPO_ROOT="$2" ; shift 2
            ;;
        -t|--target)
            REPO_TARGET="$2" ; shift 2
            ;;
        -l|--lock-retries)
            LOCK_RETRIES="$2" ; shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        --)
            shift ; break
            ;;
        *)
            die "I don't know what happened."
            ;;
    esac
done

if [ -n "$SSH_ORIGINAL_COMMAND" ]; then
    # We're running under ssh; the repository is given in the third field
    repo=`echo $SSH_ORIGINAL_COMMAND | cut -d ' ' -f 3`
else
    repo="$1"
fi

repo=`echo "$repo" | sed 's#[^-\._/[:alnum:]]##g'`
test -z "$repo" && die "need a repo to clone, relative to /repo/hg/mozilla" 

GLOBAL_HG_OPTS="--config hooks.pretxnchangegroup.z_linearhistory= --config hooks.pretxnchangegroup.z_loghistory="

name=`echo $repo | sed 's#^/*##'`
src=${REPO_ROOT}/$name

cd $REPO_TARGET || die "$REPO_TARGET does not exist, cannot create repositories there"

exit_code=0
if [ -d "$name" ]; then
    echo "$name already exists, pulling"
    lockf="${PWD}/${name}.lck"
    lockfile -r $LOCK_RETRIES $lockf || die "Could not lock destination"
    cd $name
    hg pull $GLOBAL_HG_OPTS 
    exit_code=$?
    rm -f $lockf
elif [ \! -e $name ]; then
    mkdir -p `dirname $name` 
    echo "$name does not yet exist, cloning"
    lockf="${PWD}/${name}.lck" || die "Could not lock destination"
    lockfile -r $LOCK_RETRIES $lockf
    hg clone $GLOBAL_HG_OPTS -U -v "$src" $name
    exit_code=$?
    rm -f $lockf
else
    die "WTF is $REPO_TARGET/$name"
fi

exit $exit_code

# Local variables:
# mode: shell-script
# tab-width: 4
# indent-tabs-mode: nil
# end:
